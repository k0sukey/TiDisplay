/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package be.k0suke.tidisplay;

import java.lang.ref.SoftReference;

// import android.app.Activity;
// import android.content.res.Configuration;
import android.graphics.Rect;
import android.util.DisplayMetrics;
import android.view.Display;
import android.view.View;
import android.view.Window;
// import android.view.WindowManager;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

@Kroll.module(name="Tidisplay", id="be.k0suke.tidisplay")
public class TidisplayModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TidisplayModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	private final DisplayMetrics metrics;
	private SoftReference<Display> display;
	private final Rect rect;
	private SoftReference<View> decorView;

	public TidisplayModule()
	{
		super();

		metrics = new DisplayMetrics();
		rect = new Rect();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}
	
	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}
		
	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

	// TiDisplay
	private Display getDisplay() {
		if (display == null || display.get() == null) {
			display = new SoftReference<Display>(TiApplication.getAppRootOrCurrentActivity().getWindowManager().getDefaultDisplay());
		}

		return display.get();
	}

	private View getDecorView() {
		if (decorView == null || decorView.get() == null) {
			decorView = new SoftReference<View>(TiApplication.getAppRootOrCurrentActivity().getWindow().getDecorView());
		}

		return decorView.get();
	}

	@Kroll.getProperty @Kroll.method
	public float getMainScreenWidth()
	{
		synchronized(metrics) {
			getDisplay().getMetrics(metrics);
			return metrics.widthPixels;
		}
	}

	@Kroll.getProperty @Kroll.method
	public float getMainScreenHeight()
	{
		synchronized(metrics) {
			getDisplay().getMetrics(metrics);
			return metrics.heightPixels;
		}
	}

	@Kroll.getProperty @Kroll.method
	public float getApplicationFrameWidth()
	{
		synchronized(rect) {
			getDecorView().getWindowVisibleDisplayFrame(rect);
			return rect.width();
		}
	}

	@Kroll.getProperty @Kroll.method
	public float getApplicationFrameHeight()
	{
		synchronized(rect) {
			getDecorView().getWindowVisibleDisplayFrame(rect);
			return rect.height();
		}
	}

	@Kroll.getProperty @Kroll.method
	public float getTitleBarWidth()
	{
		View view = TiApplication.getInstance().getCurrentActivity().getWindow().findViewById(Window.ID_ANDROID_CONTENT);
		return view.getWidth();
	}

	@Kroll.getProperty @Kroll.method
	public float getTitleBarHeight()
	{
		View view = TiApplication.getInstance().getCurrentActivity().getWindow().findViewById(Window.ID_ANDROID_CONTENT);
		return getApplicationFrameHeight() - view.getHeight();
	}
}
